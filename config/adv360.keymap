#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        double_tap_e_delete: double_tap_e_delete {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_TAP_E_DELETE";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp DELETE>;
        };

        hold_tap_keypad_e_delete: hold_tap_keypad_e_delete {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KEYPAD_E_DELETE";
            bindings = <&mo>, <&double_tap_e_delete>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-while-undecided;
        };
    };

    macros {
        macro_dbl_eq: macro_dbl_eq {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DBL_EQ";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
        };

        macro_caps_and: macro_caps_and {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp CAPS &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp CAPS>;

            label = "MACRO_CAPS_AND";
        };

        macro_triple_eq: macro_triple_equals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_dbl_eq &kp EQUAL>;
            label = "MACRO_TRIPLE_EQUALS";
        };
    };

    combos {
        compatible = "zmk,combos";

        triple_equals {
            bindings = <&macro_triple_eq>;
            key-positions = <41 42 43 44>;
            layers = <0>;
            timeout-ms = <200>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <41 42 43>;
            layers = <0>;
        };

        pct {
            bindings = <&kp PRCNT>;
            key-positions = <31 32 30>;
            layers = <0>;
        };

        paste_combo {
            bindings = <&kp LC(V)>;
            key-positions = <31 51>;
            layers = <0>;
        };

        copy_combo {
            bindings = <&kp LC(C)>;
            key-positions = <31 50>;
            layers = <0>;
        };

        cut_combo {
            bindings = <&kp LC(X)>;
            key-positions = <31 48>;
            layers = <0>;
        };

        left_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
            layers = <0>;
        };

        right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 17>;
            layers = <0>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <17 15>;
            layers = <0>;
        };

        greater_than {
            bindings = <&kp GT>;
            key-positions = <17 19>;
            layers = <0>;
        };

        left_square_paren {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <23 24>;
            layers = <0>;
        };

        right_square_paren {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <24 25>;
            layers = <0>;
        };

        left_curly_paren {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <22 24>;
            layers = <0>;
        };

        right_curly_paren {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <24 26>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <31 33>;
            layers = <0>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <29 31>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <31 30>;
            layers = <0>;
        };

        double_equals {
            bindings = <&macro_dbl_eq>;
            key-positions = <41 43>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <42 43>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <42 41>;
            layers = <0>;
        };

        divide {
            bindings = <&kp KP_DIVIDE>;
            key-positions = <42 23>;
            layers = <0>;
        };

        multiply {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <42 25>;
            layers = <0>;
        };

        undo_combo {
            bindings = <&kp LC(Z)>;
            key-positions = <30 49>;
        };

        redo_combo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <30 50>;
        };

        underscore_combo {
            bindings = <&kp UNDERSCORE>;
            key-positions = <41 56>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE      &kp N1     &kp N2        &kp N3    &kp N4        &kp N5  &tog 1                                                                                     &mo 3         &kp N6     &kp N7          &kp N8           &kp N9         &kp N0     &kp POUND
&kp LS(TAB)    &kp J      &kp H         &kp M     &kp G         &kp Q   &none                                                                                      &none         &kp V      &kp C           &kp U            &kp O          &kp X      &kp BSLH
&kp TAB        &kp S      &kp N         &kp T     &kp Y         &kp K   &none           &kp LCTRL  &kp LEFT_GUI      &kp RIGHT_GUI  &kp RCTRL                      &none         &kp B      &kp W           &kp I            &kp A          &kp R      &kp MINUS
&key_repeat    &kp F      &kp L         &kp D     &kp P         &kp Z                              &kp HOME          &kp END                                                     &kp SLASH  &kp PERIOD      &kp COMMA        &kp SEMICOLON  &kp SQT    &key_repeat
&kp C_AC_BACK  &kp LCTRL  &kp LEFT_ALT  &kp LEFT  &kp UP_ARROW          &kp LEFT_SHIFT  &kp SPACE  &kp ENTER         &kp BACKSPACE  &hold_tap_keypad_e_delete 1 0  &lt 2 ESCAPE             &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp RIGHT_ALT  &kp RCTRL  &kp C_AC_FORWARD
            >;
        };

        keypad {
            bindings = <
&trans            &trans           &kp F10  &kp F11  &kp F12  &trans  &trans                                      &trans  &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&kp C_NEXT        &kp C_VOLUME_UP  &kp F7   &kp F8   &kp F9   &trans  &none                                       &none   &trans  &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &trans
&kp C_PLAY_PAUSE  &kp K_MUTE       &kp F4   &kp F5   &kp F6   &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&kp C_PREVIOUS    &kp C_VOL_DN     &kp F1   &kp F2   &kp F3   &trans                  &trans      &trans                  &trans  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans            &trans           &trans   &trans   &trans           &trans  &trans  &trans      &trans  &trans  &trans          &trans      &trans        &kp KP_DOT     &trans           &trans
            >;
        };

        mouse {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7    &kp F8              &kp F9              &kp F10             &kp F11   &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans    &macro_caps_and F5  &macro_caps_and F1  &macro_caps_and F6  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans    &macro_caps_and F2  &macro_caps_and F3  &macro_caps_and F4  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &mkp MB4  &mkp MB1            &mkp MB3            &mkp MB2            &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans            &trans              &trans              &trans              &trans    &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none          &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none          &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &macro_dbl_eq  &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none          &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
