#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

&lt {
    retro-tap;
    hold-while-undecided;
    flavor = "hold-preferred";
    quick-tap-ms = <350>;
};

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO


        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <0>;
        };

        double_tap_e_delete: double_tap_e_delete {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_TAP_E_DELETE";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp DELETE>;

            tapping-term-ms = <350>;
        };

        hold_tap_keypad_e_delete: hold_tap_keypad_e_delete {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KEYPAD_E_DELETE";
            bindings = <&mo>, <&double_tap_e_delete>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            flavor = "tap-preferred";
        };

        am: altrow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "ALTROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;

            quick-tap-ms = <175>;
        };
    };

    macros {
        macro_dbl_tap: macro_dbl_tap {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_DBL_TAP";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };

        macro_caps_and: macro_caps_and {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp CAPS &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp CAPS>;

            label = "MACRO_CAPS_AND";
        };

        macro_triple_tap: macro_triple_equals {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &macro_dbl_tap MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "MACRO_TRIPLE_EQUALS";
        };

        write_number_2: write_number_2 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "WRITE_NUMBER_2";
        };

        write_number: write_number {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "WRITE_NUMBER";
        };

        write_number_3_1: write_number_3_1 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&kp NUMBER_1 &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "WRITE_NUMBER_3_1";
        };

        write_number_3_2: write_number_3_2 {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&kp NUMBER_2 &macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "WRITE_NUMBER_3_2";
        };

        macro_dbl_mouse: macro_dbl_mouse {
            compatible = "zmk,behavior-macro-two-param";
            label = "MACRO_DBL_MOUSE";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &mkp MACRO_PLACEHOLDER &macro_param_2to1 &mkp MACRO_PLACEHOLDER>;
        };

        macro_2_key: macro_2_key {
            compatible = "zmk,behavior-macro-two-param";
            label = "MACRO_2_KEY";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        #include "binary_combos.dtsi"

        triple_equals {
            bindings = <&macro_triple_tap EQUAL>;
            key-positions = <41 42 43 44>;
            layers = <0>;
            timeout-ms = <200>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <41 42 43>;
            layers = <0>;
        };

        pct {
            bindings = <&kp PRCNT>;
            key-positions = <31 32 30>;
            layers = <0>;
        };

        paste_combo {
            bindings = <&kp LC(V)>;
            key-positions = <31 51>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        copy_combo {
            bindings = <&kp LC(C)>;
            key-positions = <31 50>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        cut_combo {
            bindings = <&kp LC(X)>;
            key-positions = <31 48>;
            layers = <0>;
        };

        left_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <24 22>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <24 26>;
            layers = <0>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <24 23>;
            layers = <0>;
        };

        greater_than {
            bindings = <&kp GT>;
            key-positions = <24 25>;
            layers = <0>;
        };

        left_square_paren {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <23 42>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        right_square_paren {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <25 42>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        left_curly_paren {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <22 42>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        right_curly_paren {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 42>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <31 33>;
            layers = <0>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <29 31>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <31 30>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        double_equals {
            bindings = <&macro_dbl_tap EQUAL EQUAL>;
            key-positions = <41 43>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <42 43>;
            layers = <0>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <42 41>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        divide {
            bindings = <&kp KP_DIVIDE>;
            key-positions = <42 55>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        multiply {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <42 57>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        undo_combo {
            bindings = <&kp LC(Z)>;
            key-positions = <30 49>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        redo_combo {
            bindings = <&kp LC(LS(Z))>;
            key-positions = <30 50>;
            layers = <0>;
        };

        underscore_combo {
            bindings = <&kp UNDERSCORE>;
            key-positions = <41 56>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        double_quotes_combo {
            bindings = <&kp AT>;
            key-positions = <58 43>;
            layers = <0>;
        };

        grave_combo {
            bindings = <&kp GRAVE>;
            key-positions = <58 43 42>;
            layers = <0>;
        };

        browser_recent_tab {
            bindings = <&kp LA(Q)>;
            key-positions = <30 50>;
            layers = <2>;
        };

        alt_tab_combo {
            bindings = <&kp LA(TAB)>;
            key-positions = <29 50>;
            layers = <0>;
        };

        shift_alt_tab {
            bindings = <&kp LA(LS(TAB))>;
            key-positions = <29 48>;
            layers = <0>;
        };

        DESKTOP_1 {
            bindings = <&macro_caps_and Q>;
            key-positions = <29 16>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        DESKTOP_2 {
            bindings = <&macro_caps_and W>;
            key-positions = <29 17>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        DESKTOP_3 {
            bindings = <&macro_caps_and E>;
            key-positions = <29 18>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        DESKTOP_4 {
            bindings = <&macro_caps_and R>;
            key-positions = <29 19>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        DESKTOP_5 {
            bindings = <&macro_caps_and A>;
            key-positions = <29 30>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        DESKTOP_6 {
            bindings = <&macro_caps_and S>;
            key-positions = <29 31>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        DESKTOP_7 {
            bindings = <&macro_caps_and D>;
            key-positions = <29 31>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        DESKTOP_8 {
            bindings = <&macro_caps_and F>;
            key-positions = <29 32>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        less_than_eq {
            bindings = <&macro_2_key LESS_THAN EQUAL>;
            key-positions = <42 23 43>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        greater_than_eq {
            bindings = <&macro_2_key GREATER_THAN EQUAL>;
            key-positions = <42 41 25>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        arrow_combo {
            bindings = <&macro_2_key EQUAL GREATER_THAN>;
            key-positions = <42 43 44>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        exclamation {
            bindings = <&kp EXCL>;
            key-positions = <31 15>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <31 18>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        great_british_pounds {
            bindings = <&kp HASH>;
            key-positions = <31 19>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        dbl_mouse_1_combo {
            bindings = <&macro_dbl_mouse MB1 MB1>;
            key-positions = <55 56>;
            layers = <2>;
        };

        triple_grave_combo {
            bindings = <&macro_triple_tap GRAVE>;
            key-positions = <58 43 42>;
            layers = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE    &kp N1                         &kp N2                          &kp N3                          &kp N4                          &kp N5  &tog 1                                                                                                &mo 3         &kp N6     &kp N7      &kp N8        &kp N9         &kp N0        &kp POUND
&kp LS(TAB)  &kp J                          &kp H                           &kp M                           &kp G                           &kp Q   &none                                                                                                 &none         &kp V      &kp C       &kp U         &kp O          &kp X         &kp NON_US_BSLH
&kp TAB      &kp S                          &kp N                           &kp T                           &kp Y                           &kp K   &kp END                  &kp LCTRL  &kp LEFT_GUI      &kp RIGHT_GUI    &kp RCTRL                      &kp HOME      &kp B      &kp W       &kp I         &kp A          &kp R         &kp MINUS
&key_repeat  &kp F                          &kp L                           &kp D                           &kp P                           &kp Z                                       &kp HOME          &kp END                                                       &kp SLASH  &kp PERIOD  &kp COMMA     &kp SEMICOLON  &kp SQT       &key_repeat
&mkp MB4     &write_number_3_1 NUMBER_2 N8  &macro_2_key NUMBER_6 NUMBER_4  &macro_2_key NUMBER_3 NUMBER_2  &macro_2_key NUMBER_1 NUMBER_6          &am LEFT_ALT LEFT_SHIFT  &kp SPACE  &lt 4 ENTER       &lt 4 BACKSPACE  &hold_tap_keypad_e_delete 1 0  &lt 2 ESCAPE             &kp N8      &kp NUMBER_4  &kp NUMBER_2   &kp NUMBER_1  &mkp MB5
            >;
        };

        keypad {
            bindings = <
&trans            &trans           &kp F10  &kp F11  &kp F12  &trans  &kp KP_NUMLOCK                                      &trans  &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&kp C_NEXT        &kp C_VOLUME_UP  &kp F7   &kp F8   &kp F9   &trans  &none                                               &none   &trans  &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &trans
&kp C_PLAY_PAUSE  &kp K_MUTE       &kp F4   &kp F5   &kp F6   &trans  &none           &trans  &trans      &trans  &trans  &none   &trans  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&kp C_PREVIOUS    &kp C_VOL_DN     &kp F1   &kp F2   &kp F3   &trans                          &trans      &trans                  &trans  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans            &trans           &trans   &trans   &trans           &trans          &trans  &trans      &trans  &trans  &trans          &trans      &trans        &kp KP_DOT     &trans           &trans
            >;
        };

        mouse {
            bindings = <
&kp F1  &kp F2         &kp F3                    &kp F4     &kp F5                     &kp F6       &tog 1                                      &mo 3   &kp F7    &kp F8              &kp F9              &kp F10             &kp F11   &kp F12
&trans  &kp LC(HOME)   &kp PAGE_UP               &kp UP     &kp PAGE_DOWN              &kp LC(END)  &none                                       &none   &trans    &macro_caps_and F5  &macro_caps_and F1  &macro_caps_and F6  &trans    &trans
&trans  &trans         &kp LEFT                  &kp DOWN   &kp RIGHT                  &trans       &none   &trans  &trans      &trans  &trans  &none   &trans    &macro_caps_and F2  &macro_caps_and F3  &macro_caps_and F4  &trans    &trans
&trans  &kp LC(LS(T))  &kp LC(LS(LEFT_BRACKET))  &kp LC(W)  &kp LC(LS(RIGHT_BRACKET))  &kp LC(T)                    &trans      &trans                  &mkp MB4  &mkp MB1            &mkp MB3            &mkp MB2            &mkp MB5  &trans
&trans  &trans         &trans                    &trans     &trans                                  &trans  &trans  &trans      &trans  &trans  &trans            &trans              &trans              &trans              &trans    &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none           &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none           &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &macro_dbl_tap  &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none           &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        dbl_tap {
            bindings = <
&trans  &trans            &trans            &trans            &trans            &trans            &trans                                                                             &trans  &trans                &trans                 &trans                &trans                    &trans              &trans
&trans  &macro_dbl_tap J  &macro_dbl_tap H  &macro_dbl_tap M  &macro_dbl_tap G  &macro_dbl_tap Q  &trans                                                                             &trans  &macro_dbl_tap V      &macro_dbl_tap C       &macro_dbl_tap U      &macro_dbl_tap O          &macro_dbl_tap X    &trans
&trans  &macro_dbl_tap S  &macro_dbl_tap N  &macro_dbl_tap T  &macro_dbl_tap Y  &macro_dbl_tap K  &trans  &trans  &trans                 &trans                    &trans            &trans  &macro_dbl_tap B      &macro_dbl_tap W       &macro_dbl_tap I      &macro_dbl_tap A          &macro_dbl_tap R    &trans
&trans  &macro_dbl_tap F  &macro_dbl_tap L  &macro_dbl_tap D  &macro_dbl_tap P  &macro_dbl_tap Z                  &trans                 &trans                                              &macro_dbl_tap SLASH  &macro_dbl_tap PERIOD  &macro_dbl_tap COMMA  &macro_dbl_tap SEMICOLON  &macro_dbl_tap SQT  &trans
&trans  &trans            &trans            &trans            &caps_word                          &trans  &trans  &kp LC(BACKSPACE)      &macro_dbl_tap BACKSPACE  &macro_dbl_tap E  &trans                        &trans                 &trans                &trans                    &trans              &trans
            >;
        };
    };
};
